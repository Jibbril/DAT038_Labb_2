
/******************************************************************************
** DAT038, TDA417  Datastrukturer och algoritmer, LP2 2020
** Lab 2: Autocomplete
*******************************************************************************/

Name of lab group: [66]
Group member A:    [Fredrik Hamrefors]
Group member B:    [Jibbril Ndaw Berbres]
Group member C:    [Johan Gönczi]


/******************************************************************************
** 1. Describe how your firstIndexOf() method in RangeBinarySearch.java
**    finds the first index of a key that equals the search key.
******************************************************************************/

The basic idea is that of a binary search. Usually, when a match is found the
search is terminated. However, our implementation of the algorithm keeps going until
"low" equals "high", regardless if there are matches found before that point. If there
is a match at a given "middle", we simply save that index and then copy it's value to
"high" since we are looking for the lowest index with a match. With this method we are
guaranteed to end up with a singular result which will be the lowest index that
has a match. Once that point is reached we simply return the last saved "middle".


/******************************************************************************
** 2. What is the worst case time complexity in the number of compares
**    that each of the operations in the Autocomplete data type make,
**    as a function of the number of terms n and the number of matching terms m?
******************************************************************************/

sortDictionary():  [O(n log(n))]

When comparing two objects, Java uses a version of TimSort which has linearithmic
complexity.


allMatches():  [O(log(n) + m log(m))]

allMatches essentially consists of two steps. First we find the first and last
indexes of matches. This is done by conducting two modified binary searches
which gives a complexity of O(2log(n)) = O(log(n)). Once this is done we have
m matches, these are then sorted using the TimSort algorithm which once again
has the complexity O(m log(m)).

numberOfMatches():  [log(n)]

numberOfMatches simply conducts two binary searches for the indices. Once again
this results in a complexity of O(2log(n)) = O(log(n)).



/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

[Fredrik Hamrefors]:  [3.5 h]
[Jibbril Ndaw Berbres]:  [3.5 h]
[Johan Gönczi]:  [3.5 h]


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

There is an issue with searching for cities containing the letters 'å' 'ä' 'ö'
when using the AutocompleteCLI. If you for example input the prefix "Gö" in the
terminal there will be no matches. However, if you enter it via the code directly
in the file AutocompleteCLI.java then the code works as intended. We believe this
might have something to do with the terminal not correctly comprehending or
encoding the letters 'å' 'ä' 'ö' and thus the input into the program becomes
incorrect.


/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

We did not collaborate with any other students and no other resources except
material on canvas.


/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

We did not encounter any serious problems but some minor, for example a infinite-
loop created in the lastIndexOf() method caused by integer division.



/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/

[...]

